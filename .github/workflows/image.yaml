name: MIG Rollout from Last Push VM

on:
  push:
    branches:
      - main

jobs:
  rollout:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # required for WIF

    steps:
      # 1. Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Authenticate to GCP with Workload Identity Federation
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/515228593779/locations/global/workloadIdentityPools/wp-test/providers/wp-test
          service_account: wp-test@micro-answer-469207-r4.iam.gserviceaccount.com

      # 3. Setup gcloud CLI
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      # 4. Pick VM that pushed (has last-push=true label)
      - name: Pick last-push VM
        id: pick_vm
        run: |
          INSTANCE=$(gcloud compute instances list \
            --filter="labels.last-push=true" \
            --format="value(name)" \
            --limit=1)
          if [[ -z "$INSTANCE" ]]; then
            echo "❌ No VM labeled as last-push!"
            exit 1
          fi
          echo "✅ Selected VM: $INSTANCE"
          echo "instance=$INSTANCE" >> $GITHUB_OUTPUT

      # 5. Sync repo on VM (covers GitHub console commits too)

      # 6. Snapshot VM boot disk
      - name: Snapshot VM boot disk
        id: snapshot
        run: |
          INSTANCE=${{ steps.pick_vm.outputs.instance }}
          ZONE=us-central1-c

          DISK_NAME=$(gcloud compute instances describe $INSTANCE \
            --zone=$ZONE \
            --format="value(disks[0].source.basename())")

          IMAGE_NAME="wp-snapshot-$(date +%Y%m%d%H%M%S)"
          gcloud compute images create $IMAGE_NAME \
            --source-disk=$DISK_NAME \
            --source-disk-zone=$ZONE \
            --family=wp-snapshots \
            --storage-location=us \
            --force

          echo "✅ Created image: $IMAGE_NAME"
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      # 7. Create new instance template
      - name: Create new template
        id: template
        run: |
          IMAGE_NAME=${{ steps.snapshot.outputs.image }}
          TEMPLATE_NAME="wp-template-$(date +%Y%m%d%H%M%S)"

          gcloud compute instance-templates create $TEMPLATE_NAME \
            --project=micro-answer-469207-r4 \
            --machine-type=n2-standard-2 \
            --network-interface=network=default,network-tier=PREMIUM,stack-type=IPV4_ONLY \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=515228593779-compute@developer.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=http-server,https-server,lb-health-check \
            --create-disk=auto-delete=yes,boot=yes,device-name=wp-test-template,image=$IMAGE_NAME,mode=rw,size=15,type=pd-balanced \
            --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring \
            --reservation-affinity=any

          echo "✅ Created template: $TEMPLATE_NAME"
          echo "template=$TEMPLATE_NAME" >> $GITHUB_OUTPUT

      # 8. Rolling update MIG
      - name: Update MIG
        run: |
          TEMPLATE=${{ steps.template.outputs.template }}
          MIG_NAME="wp-mig"
          ZONE=us-central1-c

          gcloud compute instance-groups managed rolling-action start-update $MIG_NAME \
            --version=template=$TEMPLATE \
            --zone=$ZONE \
            --max-unavailable=1 \
            --min-ready-sec=30

          echo "✅ Rolling update started with template: $TEMPLATE"

      # 9. Cleanup old images & templates (keep last 5)
      - name: Cleanup old resources
        run: |
          echo "🧹 Cleaning up old images and templates..."

          OLD_IMAGES=$(gcloud compute images list \
            --filter="family=wp-snapshots" \
            --sort-by=~creationTimestamp \
            --format="value(name)" \
            | tail -n +6)

          for img in $OLD_IMAGES; do
            echo "🗑 Deleting old image: $img"
            gcloud compute images delete $img --quiet || true
          done

          OLD_TEMPLATES=$(gcloud compute instance-templates list \
            --filter="name~^wp-template-" \
            --sort-by=~creationTimestamp \
            --format="value(name)" \
            | tail -n +6)

          for tmpl in $OLD_TEMPLATES; do
            echo "🗑 Deleting old template: $tmpl"
            gcloud compute instance-templates delete $tmpl --quiet || true
          done

          echo "✅ Cleanup complete"
